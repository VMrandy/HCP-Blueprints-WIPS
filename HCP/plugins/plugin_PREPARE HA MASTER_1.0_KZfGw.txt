{
  "referenceId": "KZfGw",
  "version": "1.0",
  "name": "PREPARE HA MASTER",
  "license": "EULA",
  "description": null,
  "baseScript": "$content = @'\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n\t<settings pass=\"oobeSystem\">\n\t\t<component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\t\t<OOBE>\n\t\t\t<HideEULAPage>true</HideEULAPage>\n\t\t\t<HideOEMRegistrationScreen>true</HideOEMRegistrationScreen>\n\t\t\t<NetworkLocation>Work</NetworkLocation>\n\t\t\t<ProtectYourPC>1</ProtectYourPC>\n\t\t\t<SkipMachineOOBE>true</SkipMachineOOBE>\n\t\t</OOBE>\n\t\t<UserAccounts>\n\t\t\t<AdministratorPassword>\n\t\t\t\t<Value>HyperGrid123</Value>\n\t\t\t\t<PlainText>true</PlainText>\n\t\t\t</AdministratorPassword>\n\t\t\t<LocalAccounts>\n\t\t\t\t<LocalAccount wcm:action=\"add\">\n\t\t\t\t\t<Password>\n\t\t\t\t\t<Value>HyperGrid123</Value>\n\t\t\t\t\t<PlainText>true</PlainText>\n\t\t\t\t\t</Password>\n\t\t\t\t<Description>Admin</Description>\n\t\t\t\t<DisplayName>Administrator_Test</DisplayName>\n\t\t\t\t<Group>Administrators;Users</Group>\n\t\t\t\t<Name>Administrator_Test</Name>\n\t\t\t\t</LocalAccount>\n\t\t\t</LocalAccounts>\n\t\t</UserAccounts>\n\t\t<RegisteredOwner>HyperGrid</RegisteredOwner>\n\t\t<FirstLogonCommands>\n\t\t\t<SynchronousCommand wcm:action=\"add\">\n\t\t\t\t<CommandLine>powershell.exe Start-Process -FilePath 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe' -ArgumentList '. C:\\opt\\cluster.ps1; Cluster' -WindowStyle Hidden -Wait</CommandLine>\n\t\t\t\t<Description>Cluster Install</Description>\n\t\t\t\t<Order>1</Order>\n\t\t\t\t<RequiresUserInput>false</RequiresUserInput>\n\t\t\t</SynchronousCommand>\n\t\t\t<SynchronousCommand wcm:action=\"add\">\n\t\t\t\t<CommandLine>powershell.exe Start-Process -FilePath 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe' -ArgumentList '. C:\\opt\\cluster.ps1; sql' -WindowStyle Hidden -Wait</CommandLine>\n\t\t\t\t<Description>SQL Install 2</Description>\n\t\t\t\t<Order>2</Order>\n\t\t\t\t<RequiresUserInput>false</RequiresUserInput>\n\t\t\t</SynchronousCommand>\n\t\t\t<SynchronousCommand wcm:action=\"add\">\n\t\t\t\t<CommandLine>powershell.exe -executionpolicy bypass Start-Sleep -Seconds 10</CommandLine>\n\t\t\t\t<Description>Wait After Install</Description>\n\t\t\t\t<Order>3</Order>\n\t\t\t\t<RequiresUserInput>false</RequiresUserInput>\n\t\t\t</SynchronousCommand>\n\t\t\t<SynchronousCommand wcm:action=\"add\">\n\t\t\t\t<CommandLine>logoff</CommandLine>\n\t\t\t\t<Description>Logoff After Install</Description>\n\t\t\t\t<Order>4</Order>\n\t\t\t\t<RequiresUserInput>false</RequiresUserInput>\n\t\t\t</SynchronousCommand>\n\t\t</FirstLogonCommands>\n\t\t<AutoLogon>\n\t\t\t<Password>\n\t\t\t\t<Value>$Domain-Pwd</Value>\n\t\t\t\t<PlainText>true</PlainText>\n\t\t\t</Password>\n\t\t\t<Domain>$Domain_Name</Domain>\n\t\t\t<Enabled>true</Enabled>\n\t\t\t<LogonCount>1</LogonCount>\n\t\t\t<Username>$Domain-Admin</Username>\n\t\t</AutoLogon>\n\t\t</component>\n\t\t<component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\t\t\t<InputLocale>en-Us</InputLocale>\n\t\t\t<SystemLocale>en-Us</SystemLocale>\n\t\t\t<UILanguage>en-Us</UILanguage>\n\t\t\t<UILanguageFallback>en-Us</UILanguageFallback>\n\t\t\t<UserLocale>en-Us</UserLocale>\n\t\t</component>\n\t</settings>\n\t<settings pass=\"specialize\">\n\t<component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\t<ComputerName>$Master_Name</ComputerName>\n\t\t<OEMName>HyperGrid</OEMName>\n\t\t<RegisteredOrganization>HyperGrid</RegisteredOrganization>\n\t\t<RegisteredOwner>HyperGrid</RegisteredOwner>\n\t</component>\n\t<component name=\"Microsoft-Windows-UnattendedJoin\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\t<Identification>\n\t\t<Credentials>\n\t\t\t<Domain>$Domain_Name</Domain>\n\t\t\t<Password>$Domain-Pwd</Password>\n\t\t\t<Username>$Domain-Admin</Username>\n\t\t</Credentials>\n\t\t<DebugJoin>true</DebugJoin>\n\t\t<JoinDomain>$Domain_Name.skygrid.cloud</JoinDomain>\n\t</Identification>\n\t</component>\n\t<component name=\"Networking-MPSSVC-Svc\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\t\t<FirewallGroups>\n\t\t\t<FirewallGroup wcm:action=\"add\" wcm:keyValue=\"EnableRDP\">\n\t\t\t\t<Active>true</Active>\n\t\t\t\t<Group>@FirewallAPI.dll,-28752</Group>\n\t\t\t\t<Profile>all</Profile>\n\t\t\t</FirewallGroup>\n\t\t</FirewallGroups>\n\t</component>\n\t<component name=\"Microsoft-Windows-TerminalServices-RDP-WinStationExtensions\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\t\t<UserAuthentication>0</UserAuthentication>\n\t</component>\n\t<component name=\"Microsoft-Windows-TerminalServices-LocalSessionManager\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\t\t<fDenyTSConnections>false</fDenyTSConnections>\n\t</component>\n\t</settings>\n\t<settings pass=\"offlineServicing\">\n\t\t<component name=\"Microsoft-Windows-LUA-Settings\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\t\t\t<EnableLUA>false</EnableLUA>\n\t\t</component>\n\t</settings>\n</unattend>\n'@\n\nNew-Item 'c:\\opt\\Unattend.xml' -type file -force -value $content\n\n## Creating Startup batch file\n$content = @'\nPowerShell.exe -NoProfile -WindowStyle Hidden -Command \"& {Start-Process PowerShell.exe -ArgumentList '-NoProfile -ExecutionPolicy Bypass -File \"\"C:\\opt\\HG.ps1 \"\"' -Verb RunAs -WindowStyle Hidden}\"\n\n'@\nNew-Item 'C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\HG_start.bat' -type file -force -value $content\n\n###Creating the startup powershell script\n$content = @'\nWhile (Get-Disk | Where-Object IsOffline -Eq $True)\n{\nStart-Transcript -path C:\\startup.txt -append\nWrite-Host \"Trying. . .\"\nGet-Disk | Where-Object IsOffline -Eq $True | Set-Disk -IsOffline $False\nGet-Disk | Where-Object IsReadOnly -Eq $True | Set-Disk -IsReadOnly $False\n}\nWhile (Get-Disk | Where-Object IsReadOnly -Eq $True)\n{\nStart-Transcript -path C:\\startup.txt -append\nWrite-Host \"Trying. . .\"\nGet-Disk | Where-Object IsOffline -Eq $True | Set-Disk -IsOffline $False\nGet-Disk | Where-Object IsReadOnly -Eq $True | Set-Disk -IsReadOnly $False\n}\n'@\nNew-Item 'C:\\opt\\HG.ps1' -type file -force -value $content\n###################Need to Change\n\n$content = @'\nfunction Cluster\n{Start-Transcript -path C:\\output.txt -append\nif ((Get-ItemProperty -Name Userinit -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\WinLogon').Userinit)\n {\n\n    Set-ItemProperty -Name Userinit -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\WinLogon'-Value ''\n }\nGet-WindowsFeature Failover*\n$cluster_service = get-service -DisplayName 'Cluster Service'\nif ($cluster_service.status -eq 'Stopped')\n{\n    Clear-ClusterNode -Force\n    New-Cluster -Name \"$Cluster_Name\" -Node \"$Master_Name\"\n    }\n    \n    else { Get-Cluster\n    }\nStop-Transcript\n}\n\nfunction sql \n{\n\nStart-Transcript -path C:\\sql.txt -append\n$con = 'True'\nGet-Disk | Where-Object IsOffline -Eq $True | Set-Disk -IsOffline $False\nSleep 30\nGet-Disk | Where-Object IsReadOnly -Eq $True | Set-Disk -IsReadOnly $False\nwhile (Get-Disk | Where-Object IsOffline -Eq $True)\n{\n  Get-Disk | Where-Object IsOffline -Eq $True | Set-Disk -IsOffline $False\n  Get-Disk | Where-Object IsReadOnly -Eq $True | Set-Disk -IsReadOnly $False\n  if ((Get-Disk | Where-Object IsOffline -Eq $True) -and (Get-Disk | Where-Object IsReadOnly -Eq $True))\n  {\n    Sleep 30\n  }\n  else{\n    Break\n  }\n}\nwhile ($con -ne $null)\n{\n    $disk = Get-Disk\n    $disks = @()\n    $disks += $disk\n    if (($disks.length) -gt 8) { \n    Break\n    }\n}\n\nGet-Disk | Where-Object IsOffline -Eq $True | Set-Disk -IsOffline $False\n#$net = new-object -ComObject WScript.Network\n#$net.MapNetworkDrive(\"T:\", \"\\\\10.0.1.19\\fs01\\ISO\", $false, \"skygrid\\pmathur\", \"$pass\")\n###########Adding code for minio download\n\nImport-Module 'C:\\Program Files (x86)\\AWS Tools\\PowerShell\\AWSPowerShell\\AWSPowerShell.psd1'\n$list = Get-S3Object -BucketName 'app-img' -EndpointUrl 'http://216.58.168.93:9000' -AccessKey 'O16J7HMVRZE4QDBSRSPK' -SecretKey 'dfOWhad53mPH5+xn7sIxDbYyDJ5JRrHDqwaLSUAy'\n$list.key\n##Download Configuration File\nif ($list | Where-Object {($_.key).Contains('ConfigurationFile') -and ($_.key).EndsWith('.ini')})\n{\n Write-Host \"#######\"\n Read-S3Object -BucketName 'app-img' -Key ($list | Where-Object {($_.key).Contains('ConfigurationFile') -and ($_.key).EndsWith('.ini')}).Key -File 'C:\\sql_2016\\test_new.ini' -EndpointUrl 'http://216.58.168.93:9000' -AccessKey 'O16J7HMVRZE4QDBSRSPK' -SecretKey 'dfOWhad53mPH5+xn7sIxDbYyDJ5JRrHDqwaLSUAy' -ErrorAction Stop\n Write-Host \"Downloaded Configuration File\"\n Write-Host \"#######\"\n Write-Host \"#######\"\n}\n\n##Download SQL Setup ISO\n\nif ($list | Where-Object {($_.key).Contains('SQLServer2016SP1') -and ($_.key).EndsWith('.iso')})\n{\n \n Write-Host \"#######\"\n Read-S3Object -BucketName 'app-img' -Key ($list | Where-Object {($_.key).Contains('SQLServer2016SP1') -and ($_.key).EndsWith('.iso')}).Key -File 'C:\\sql_2016\\SQLServer2016SP1-FullSlipstream-x64-ENU.iso' -EndpointUrl 'http://216.58.168.93:9000' -AccessKey 'O16J7HMVRZE4QDBSRSPK' -SecretKey 'dfOWhad53mPH5+xn7sIxDbYyDJ5JRrHDqwaLSUAy' -ErrorAction Stop\n Write-Host \"Downloaded SQL Setup ISO File\"\n Write-Host \"#######\"\n Write-Host \"#######\"\n}\n\n##Download SSMS Setup EXE\n\nif ($list | Where-Object {($_.key).Contains('SSMS-Setup-ENU') -and ($_.key).EndsWith('.exe')})\n{\n \n Write-Host \"#######\"\n Read-S3Object -BucketName 'app-img' -Key ($list | Where-Object {($_.key).Contains('SSMS-Setup-ENU') -and ($_.key).EndsWith('.exe')}).Key -File 'C:\\sql_2016\\SSMS-Setup-ENU.exe' -EndpointUrl 'http://216.58.168.93:9000' -AccessKey 'O16J7HMVRZE4QDBSRSPK' -SecretKey 'dfOWhad53mPH5+xn7sIxDbYyDJ5JRrHDqwaLSUAy' #-ErrorAction Stop\n Write-Host \"Downloaded SSMS Setup EXE File\"\n Write-Host \"#######\"\n Write-Host \"#######\"\n}\nMount-DiskImage -ImagePath \"C:\\sql_2016\\SQLServer2016SP1-FullSlipstream-x64-ENU.iso\" \n\n$volumes = Get-Volume\nforeach ( $vol in $volumes)\n{\n     if ($vol.FileSystemLabel -match \"SQL2016\")\n      {\n        Write-Host \"Success\"\n        $drive = $vol.DriveLetter\n        Break\n        }\n    }\n    $drive\n    \n    $exec = $drive + \":\\setup.exe\"\n#if (Test-Path C:\\sql_2016){\n#            Copy-Item -Path ($drive + \":\\*\") -Destination C:\\sql_2016 -Recurse\n            #Copy-Item -Path T:\\ConfigurationFile-puneet.ini -Destination C:\\test_new.ini\n            #Copy-Item -Path T:\\SSMS-Setup-ENU.exe -Destination C:\\sql_2016\\SSMS-Setup-ENU.exe\n#            }\n#else\n#  {\n#    md c:\\sql_2016\n#    Copy-Item -Path ($drive + \":\\*\") -Destination C:\\sql_2016 -Recurse\n#    Copy-Item -Path T:\\ConfigurationFile-puneet.ini -Destination C:\\test_new.ini\n#    Copy-Item -Path T:\\SSMS-Setup-ENU.exe -Destination C:\\sql_2016\\SSMS-Setup-ENU.exe\n#    }    \n    \n#Dismount-DiskImage -ImagePath \"T:\\SQLServer2016SP1-FullSlipstream-x64-ENU.iso\"\n#$net.RemoveNetworkDrive(\"T:\")\n\n\nif ( (Get-Cluster).Name -like '$Cluster_Name'){\n$disks = (Get-PhysicalDisk)\nforeach ($disk in $disks){\n\n $path = (Get-Partition -DiskNumber $disk.DeviceId).AccessPaths\n if ($path.Where( {$_ -like '*SQLBIN*'}) -ne $null)\n {$str = $path.Where( {$_ -like '*SQLBIN*'})\n  $str = $str.TrimEnd(\"\\\")\n  $OldString = 'SQLBIN'\n  (Get-Content -Path 'C:\\sql_2016\\test_new.ini').Replace($OldString,$str) | Set-Content -Path 'C:\\sql_2016\\test_new.ini'\n }\n if ($path.Where( {$_ -like '*TEMPDB*'}))\n {\n   if ($path.Where( {$_ -like '*TEMPDBLOGS*'}))\n    {$str = $path.Where( {$_ -like '*TEMPDBLOGS*'})\n    $str = $str.TrimEnd(\"\\\")\n    $OldString = '[SQLTEMPDBLOGDIR]'\n    $str\n    (Get-Content -Path 'C:\\sql_2016\\test_new.ini').Replace($OldString,$str) | Set-Content -Path 'C:\\sql_2016\\test_new.ini'\n    }\n \n    else{$str = $path.Where( {$_ -like '*TEMPDB*'})\n    $str = $str.TrimEnd(\"\\\")\n    $OldString = '[SQLTEMPDBDIR]'\n    (Get-Content -Path 'C:\\sql_2016\\test_new.ini').Replace($OldString,$str) | Set-Content -Path 'C:\\sql_2016\\test_new.ini'\n    }\n  }\n if ($path.Where( {$_ -like '*SQLLOGS*'}))\n {$str = $path.Where( {$_ -like '*SQLLOGS*'})\n  ##Removing the File replace \n  #$str = $str.TrimEnd(\"\\\")\n  #$OldString = 'SQLLOGS'\n  #(Get-Content -Path 'C:\\sql_2016\\test_new.ini').Replace($OldString,$str) | Set-Content -Path 'C:\\sql_2016\\test_new.ini'\n  ##Adding the SQLLOGS specific path as per Kalyan\n  md $str.split(\"-\")[0]\n  Remove-PartitionAccessPath -DiskNumber (Get-Partition -DiskNumber $disk.DeviceId).DiskNumber -PartitionNumber (Get-Partition -DiskNumber $disk.DeviceId).PartitionNumber -AccessPath ($path.Where( {$_ -like '*SQLLOGS*'})) -ErrorAction Continue\n  Remove-Item -path $str.trimend(\"\\\") -recurse\n  Add-PartitionAccessPath -DiskNumber (Get-Partition -DiskNumber $disk.DeviceId).DiskNumber -PartitionNumber (Get-Partition -DiskNumber $disk.DeviceId).PartitionNumber -AccessPath $str.split(\"-\")[0]\n }\n if ($path.Where( {$_ -like '*DATA1*'}))\n {\n  $str = $path.Where( {$_ -like '*DATA1*'})\n  Remove-PartitionAccessPath -DiskNumber (Get-Partition -DiskNumber $disk.DeviceId).DiskNumber -PartitionNumber (Get-Partition -DiskNumber $disk.DeviceId).PartitionNumber -AccessPath ($path.Where( {$_ -like '*DATA1*'})) -ErrorAction Continue\n  md 'C:/mnt/hypercloud/volumes/DATA/DATA1' -ErrorAction SilentlyContinue\n  Remove-Item -path $str.trimend(\"\\\") -recurse\n  Add-PartitionAccessPath -DiskNumber (Get-Partition -DiskNumber $disk.DeviceId).DiskNumber -PartitionNumber (Get-Partition -DiskNumber $disk.DeviceId).PartitionNumber -AccessPath 'C:/mnt/hypercloud/volumes/DATA/DATA1'\n  Write-Host ($path)\n }\n if ($path.Where( {$_ -like '*DATA2*'}))\n {\n  $str = $path.Where( {$_ -like '*DATA2*'})\n  Remove-PartitionAccessPath -DiskNumber (Get-Partition -DiskNumber $disk.DeviceId).DiskNumber -PartitionNumber (Get-Partition -DiskNumber $disk.DeviceId).PartitionNumber -AccessPath ($path.Where( {$_ -like '*DATA2*'})) -ErrorAction Continue\n  md 'C:/mnt/hypercloud/volumes/DATA/DATA2' -ErrorAction SilentlyContinue\n  Remove-Item -path $str.trimend(\"\\\") -recurse\n  Add-PartitionAccessPath -DiskNumber (Get-Partition -DiskNumber $disk.DeviceId).DiskNumber -PartitionNumber (Get-Partition -DiskNumber $disk.DeviceId).PartitionNumber -AccessPath 'C:/mnt/hypercloud/volumes/DATA/DATA2'\n  Write-Host ($path)\n }\n if ($path.Where( {$_ -like '*DATA3*'}))\n {\n  $str = $path.Where( {$_ -like '*DATA3*'})\n  Remove-PartitionAccessPath -DiskNumber (Get-Partition -DiskNumber $disk.DeviceId).DiskNumber -PartitionNumber (Get-Partition -DiskNumber $disk.DeviceId).PartitionNumber -AccessPath ($path.Where( {$_ -like '*DATA3*'})) -ErrorAction Continue\n  md 'C:/mnt/hypercloud/volumes/DATA/DATA3' -ErrorAction SilentlyContinue\n  Remove-Item -path $str.trimend(\"\\\") -recurse\n  Add-PartitionAccessPath -DiskNumber (Get-Partition -DiskNumber $disk.DeviceId).DiskNumber -PartitionNumber (Get-Partition -DiskNumber $disk.DeviceId).PartitionNumber -AccessPath 'C:/mnt/hypercloud/volumes/DATA/DATA3'\n  Write-Host ($path)\n }\n if ($path.Where( {$_ -like '*DATA4*'}))\n {\n  $str = $path.Where( {$_ -like '*DATA4*'})\n  Remove-PartitionAccessPath -DiskNumber (Get-Partition -DiskNumber $disk.DeviceId).DiskNumber -PartitionNumber (Get-Partition -DiskNumber $disk.DeviceId).PartitionNumber -AccessPath ($path.Where( {$_ -like '*DATA4*'})) -ErrorAction Continue\n  md 'C:/mnt/hypercloud/volumes/DATA/DATA4' -ErrorAction SilentlyContinue\n  Remove-Item -path $str.trimend(\"\\\") -recurse\n  Add-PartitionAccessPath -DiskNumber (Get-Partition -DiskNumber $disk.DeviceId).DiskNumber -PartitionNumber (Get-Partition -DiskNumber $disk.DeviceId).PartitionNumber -AccessPath 'C:/mnt/hypercloud/volumes/DATA/DATA4'\n  Write-Host ($path)\n }\n}\nSleep 30\nGet-Disk | Where-Object IsReadOnly -Eq $True | Set-Disk -IsReadOnly $False\nStart-Process $exec -ArgumentList '/ConfigurationFile=\"C:\\sql_2016\\test_new.ini\"' -Wait -PassThru -ErrorAction Stop\n\nGet-Service | where { $_.Name -like '*SQL*'}\nif (Get-Service | Where-Object Name -EQ 'MSSQLSERVER' | Where-Object Status -EQ 'Running')\n{\n    Import-Module SqlServer     \n    Enable-SqlAlwaysOn -ServerInstance $Master_Name -Force\n    Start-Process \"C:\\sql_2016\\SSMS-Setup-ENU.exe\" -ArgumentList '/install /quiet' -Wait -PassThru -ErrorAction Stop\n    Dismount-DiskImage -ImagePath \"C:\\sql_2016\\SQLServer2016SP1-FullSlipstream-x64-ENU.iso\"\n  }\n else{\n  Write-Host \"Check the SQL Installation. . . .\"\n  }\n}\nelse{\n \tGet-Service -DisplayName 'Cluster Service'\n\tGet-Cluster\n  }\n\nStop-Transcript\n\n}\n'@\n\nNew-Item 'C:\\opt\\cluster.ps1' -type file -force -value $content\n\nStart-Process -FilePath 'C:\\Windows\\System32\\Sysprep\\sysprep.exe' -ArgumentList '/reboot /oobe /generalize /unattend:c:\\opt\\Unattend.xml'\n",
  "envs": [
    {
      "prop": "Domain-Pwd",
      "val": "Password",
      "hidden": false,
      "eval": null
    },
    {
      "prop": "Domain_Name",
      "val": "Domain-Name",
      "hidden": false,
      "eval": null
    },
    {
      "prop": "Domain-Admin",
      "val": "Admin",
      "hidden": false,
      "eval": null
    },
    {
      "prop": "Cluster_Name",
      "val": "Test",
      "hidden": false,
      "eval": null
    },
    {
      "prop": "Master_Name",
      "val": "Master",
      "hidden": false,
      "eval": null
    }
  ],
  "scriptArgs": null,
  "scriptLang": "POWERSHELL",
  "timeout": 30
}