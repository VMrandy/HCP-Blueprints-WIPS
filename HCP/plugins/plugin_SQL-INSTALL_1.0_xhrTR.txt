{
  "referenceId": "xhrTR",
  "version": "1.0",
  "name": "SQL-INSTALL",
  "license": "EULA",
  "description": null,
  "baseScript": "$con = 'True'\nwhile ($con -ne $null)\n{\n    $disk = Get-Disk\n    $disks = @()\n    $disks += $disk\n    if (($disks.length) -gt 5) { \n    #Write-Host \"Writing test-1\"\n    Sleep 30\n    Break\n    }\n    Sleep 30\n    }\n#Copy-Item -Path 'C:\\ConfigurationFile-puneet.ini' -Destination 'C:\\test_new.ini'\n$net = new-object -ComObject WScript.Network\n$net.MapNetworkDrive(\"T:\", \"\\\\10.0.1.19\\fs01\\ISO\", $false, \"skygrid\\pmathur\", \"$pass\")\nMount-DiskImage -ImagePath \"T:\\SQLServer2016SP1-FullSlipstream-x64-ENU.iso\" \n$volumes = Get-Volume\nforeach ( $vol in $volumes)\n{\n     if ($vol.FileSystemLabel -match \"SQL2016\")\n      {\n        Write-Host \"Success\"\n        $drive = $vol.DriveLetter\n        Break\n        }\n    }\n    $drive\n    ($drive + \":\\*\")\nif (Test-Path C:\\sql_2016){\n            Copy-Item -Path ($drive + \":\\*\") -Destination C:\\sql_2016 -Recurse\n            Copy-Item -Path T:\\ConfigurationFile-puneet.ini -Destination C:\\test_new.ini\n            }\nelse\n  {\n    md c:\\sql_2016\n    Copy-Item -Path ($drive + \":\\*\") -Destination C:\\sql_2016 -Recurse\n    Copy-Item -Path T:\\ConfigurationFile-puneet.ini -Destination C:\\test_new.ini\n    }    \n    \nDismount-DiskImage -ImagePath \"T:\\SQLServer2016SP1-FullSlipstream-x64-ENU.iso\"\n#$net.RemoveNetworkDrive(\"T:\")\n#Write-Host \"test-2\"\n$partitions = Get-Partition\n\t\tforeach ($partition in $partitions)\n\t\t\t{\n    \t\t\t$paths = $partition.accesspaths\n    \t\t\tforeach ($path in $paths)\n    \t\t\t\t{\n                        \n                        if ($path -imatch 'data1'){\n                        $path = $path.TrimEnd(\"\\\")\n                            $NewString = $path\n                            $OldString = 'C:\\DATA1'\n                            (Get-Content -Path 'C:\\test_new.ini').Replace($OldString,$NewString) | Set-Content -Path 'C:\\test_new.ini'\n                            \n                            }\n                        if ($path -imatch 'sqlbin')\n                            {\n                            $path = $path.TrimEnd(\"\\\")\n                        $NewString = $path\n                        $OldString = 'C:\\SQLBIN'\n                            (Get-Content -Path 'C:\\test_new.ini').Replace($OldString,$NewString) | Set-Content -Path 'C:\\test_new.ini'\n                        }\n                        if ($path -imatch 'backup')\n                           {\n                           $path = $path.TrimEnd(\"\\\")\n                        $NewString = $path\n                        $OldString = 'C:\\BACKUP'\n                            (Get-Content -Path 'C:\\test_new.ini').Replace($OldString,$NewString) | Set-Content -Path 'C:\\test_new.ini'\n            }\n            if (($path -imatch 'tempdb') -and (-not ($path -imatch 'tempdblogs')))\n    {\n  $path = $path.TrimEnd(\"\\\")\n                        $NewString = $path\n                        $OldString = 'C:\\TEMPDBO'\n                        (Get-Content -Path 'C:\\test_new.ini').Replace($OldString,$NewString) | Set-Content -Path 'C:\\test_new.ini'\n                        }\n                        if ($path -imatch 'tempdblogs')\n    {\n     $path = $path.TrimEnd(\"\\\")\n     $NewString = $path\n                        $OldString = 'C:\\TEMPDBLOGS'\n                        (Get-Content -Path 'C:\\test_new.ini').Replace($OldString,$NewString) | Set-Content -Path 'C:\\test_new.ini'\n                        }\n                        }}\n#$proc = Start-Process \"c:\\sql_2016\\setup.exe\" -ArgumentList '/ConfigurationFile=\"C:\\test_new.ini\"' -Wait -PassThru -erroraction stop\n#write-host \"test-3\"\n#if ($proc.exitcode -eq '0')\n#{Write-Host \"SQL installed successfully\"}\nSleep 300\nStart-Process \"c:\\sql_2016\\setup.exe\" -ArgumentList '/ConfigurationFile=\"C:\\test_new.ini\"' -Wait -PassThru -ErrorAction Stop\nGet-Service | where { $_.Name -like '*SQL*'}\n",
  "envs": [
    {
      "prop": "pass",
      "val": "6vDCTab3",
      "hidden": false,
      "eval": null
    }
  ],
  "scriptArgs": null,
  "scriptLang": "POWERSHELL",
  "timeout": 30
}