{
  "referenceId": "4qCdU",
  "version": "1.0",
  "name": "puppet_agent",
  "license": "Apache License 2.0",
  "description": null,
  "baseScript": "#!/bin/sh\n# WARNING: REQUIRES /bin/sh\n#\n# Install puppet-agent with shell... how hard can it be?\n#\n# 0.0.1a - Here Be Dragons\n#\n\n# Set up colours\nif tty -s;then\n    RED=${RED:-$(tput setaf 1)}\n    GREEN=${GREEN:-$(tput setaf 2)}\n    YLW=${YLW:-$(tput setaf 3)}\n    BLUE=${BLUE:-$(tput setaf 4)}\n    RESET=${RESET:-$(tput sgr0)}\nelse\n    RED=\n    GREEN=\n    YLW=\n    BLUE=\n    RESET=\nfi\n\n# Timestamp\nnow () {\n    date +'%H:%M:%S %z'\n}\n\n# Logging functions instead of echo\nlog () {\n    echo \"${BLUE}`now`${RESET} ${1}\"\n}\n\ninfo () {\n    log \"${GREEN}INFO${RESET}: ${1}\"\n}\n\nwarn () {\n    log \"${YLW}WARN${RESET}: ${1}\"\n}\n\ncritical () {\n    log \"${RED}CRIT${RESET}: ${1}\"\n}\n\nutopic () {\n    warn \"There is no utopic release yet, see https://tickets.puppetlabs.com/browse/CPR-92 for progress\";\n    warn \"We'll use the trusty package for now\";\n    ubuntu_codename=\"trusty\";\n}\n\n# Check whether a command exists - returns 0 if it does, 1 if it does not\nexists() {\n  if command -v $1 >/dev/null 2>&1\n  then\n    return 0\n  else\n    return 1\n  fi\n}\n\n# Helper bug-reporting text\nreport_bug() {\n  critical \"Please file a bug report at https://github.com/petems/puppet-install-shell/\"\n  critical \"\"\n  critical \"Version: $version\"\n  critical \"Platform: $platform\"\n  critical \"Platform Version: $platform_version\"\n  critical \"Machine: $machine\"\n  critical \"OS: $os\"\n  critical \"\"\n  critical \"Please detail your operating system type, version and any other relevant details\"\n}\n\n# Get command line arguments\nwhile getopts v:f:d:h opt\ndo\n  case \"$opt\" in\n    v)  version=\"$OPTARG\";;\n    f)  cmdline_filename=\"$OPTARG\";;\n    d)  cmdline_dl_dir=\"$OPTARG\";;\n    h) echo >&2 \\\n      \"install_puppet_agent.sh - A shell script to install Puppet Agent > 4.0.0, asumming no dependancies\n      usage:\n      -v   version         version to install, defaults to $latest_version\n      -f   filename        filename for downloaded file, defaults to original name\n      -d   download_dir    filename for downloaded file, defaults to /tmp/(random-number)\"\n      exit 0;;\n    \\?)   # unknown flag\n      echo >&2 \\\n      \"unknown option\n      usage: $0 [-v version] [-f filename | -d download_dir]\"\n      exit 1;;\n  esac\ndone\nshift `expr $OPTIND - 1`\n\nmachine=`uname -m`\nos=`uname -s`\n\n# Retrieve Platform and Platform Version\nif test -f \"/etc/lsb-release\" && grep -q DISTRIB_ID /etc/lsb-release; then\n  platform=`grep DISTRIB_ID /etc/lsb-release | cut -d \"=\" -f 2 | tr '[A-Z]' '[a-z]'`\n  platform_version=`grep DISTRIB_RELEASE /etc/lsb-release | cut -d \"=\" -f 2`\nelif test -f \"/etc/debian_version\"; then\n  platform=\"debian\"\n  platform_version=`cat /etc/debian_version`\nelif test -f \"/etc/redhat-release\"; then\n  platform=`sed 's/^\\(.\\+\\) release.*/\\1/' /etc/redhat-release | tr '[A-Z]' '[a-z]'`\n  platform_version=`sed 's/^.\\+ release \\([.0-9]\\+\\).*/\\1/' /etc/redhat-release`\n\n  #If /etc/redhat-release exists, we act like RHEL by default. Except for fedora\n  if test \"$platform\" = \"fedora\"; then\n    platform=\"fedora\"\n  else\n    platform=\"el\"\n  fi\nelif test -f \"/etc/system-release\"; then\n  platform=`sed 's/^\\(.\\+\\) release.\\+/\\1/' /etc/system-release | tr '[A-Z]' '[a-z]'`\n  platform_version=`sed 's/^.\\+ release \\([.0-9]\\+\\).*/\\1/' /etc/system-release | tr '[A-Z]' '[a-z]'`\n  # amazon is built off of fedora, so act like RHEL\n  if test \"$platform\" = \"amazon linux ami\"; then\n    platform=\"el\"\n    platform_version=\"6.0\"\n  fi\n# Apple OS X\nelif test -f \"/usr/bin/sw_vers\"; then\n  platform=\"mac_os_x\"\n  # Matching the tab-space with sed is error-prone\n  platform_version=`sw_vers | awk '/^ProductVersion:/ { print $2 }'`\n\n  major_version=`echo $platform_version | cut -d. -f1,2`\n  case $major_version in\n    \"10.6\") platform_version=\"10.6\" ;;\n    \"10.7\"|\"10.8\"|\"10.9\") platform_version=\"10.7\" ;;\n    *) echo \"No builds for platform: $major_version\"\n       report_bug\n       exit 1\n       ;;\n  esac\n\n  # x86_64 Apple hardware often runs 32-bit kernels (see OHAI-63)\n  x86_64=`sysctl -n hw.optional.x86_64`\n  if test $x86_64 -eq 1; then\n    machine=\"x86_64\"\n  fi\nelif test -f \"/etc/release\"; then\n  platform=\"solaris2\"\n  machine=`/usr/bin/uname -p`\n  platform_version=`/usr/bin/uname -r`\nelif test -f \"/etc/SuSE-release\"; then\n  if grep -q 'Enterprise' /etc/SuSE-release;\n  then\n      platform=\"sles\"\n      platform_version=`awk '/^VERSION/ {V = $3}; /^PATCHLEVEL/ {P = $3}; END {print V \".\" P}' /etc/SuSE-release`\n  else\n      platform=\"suse\"\n      platform_version=`awk '/^VERSION =/ { print $3 }' /etc/SuSE-release`\n  fi\nelif test -f \"/etc/arch-release\"; then\n  platform=\"archlinux\"\n  platform_version=`/usr/bin/uname -r`\nelif test \"x$os\" = \"xFreeBSD\"; then\n  platform=\"freebsd\"\n  platform_version=`uname -r | sed 's/-.*//'`\nelif test \"x$os\" = \"xAIX\"; then\n  platform=\"aix\"\n  platform_version=`uname -v`\n  machine=\"ppc\"\nfi\n\nif test \"x$platform\" = \"x\"; then\n  critical \"Unable to determine platform version!\"\n  report_bug\n  exit 1\nfi\n\nif test \"x$version\" = \"x\"; then\n  version=\"latest\";\n  info \"Version parameter not defined, assuming latest\";\nelse\n  info \"Version parameter defined: $version\";\n  info \"Matching Puppet version to puppet-agent package version (See http://docs.puppetlabs.com/puppet/latest/reference/about_agent.html for more details)\"\n  case \"$version\" in\n    4.0.*)\n      puppet_agent_version='1.0.1'\n      ;;\n    4.1.*)\n      puppet_agent_version='1.1.1'\n      ;;\n    4.2.*)\n      puppet_agent_version='1.2.7'\n      ;;\n    4.3.*)\n      puppet_agent_version='1.3.5'\n      ;;\n    4.4.*)\n      puppet_agent_version='1.4.2'\n      ;;\n    4.5.*)\n      puppet_agent_version='1.5.3'\n      ;;\n    4.6.*)\n      puppet_agent_version='1.6.2'\n      ;;\n    4.7.*)\n      puppet_agent_version='1.7.1'\n      ;;\n    4.8.*)\n      puppet_agent_version='1.8.0'\n      ;;\n    *)\n      critical \"Unable to match requested puppet version to puppet-agent version - Check http://docs.puppetlabs.com/puppet/latest/reference/about_agent.html\"\n      report_bug\n      exit 1\n      ;;\n  esac\nfi\n\n# Mangle $platform_version to pull the correct build\n# for various platforms\nmajor_version=`echo $platform_version | cut -d. -f1`\ncase $platform in\n  \"el\")\n    platform_version=$major_version\n    ;;\n  \"fedora\")\n    case $major_version in\n      \"23\") platform_version=\"22\";;\n      *) platform_version=$major_version;;\n    esac\n    ;;\n  \"debian\")\n    case $major_version in\n      \"5\") platform_version=\"6\";;\n      \"6\") platform_version=\"6\";;\n      \"7\") platform_version=\"6\";;\n    esac\n    ;;\n  \"freebsd\")\n    platform_version=$major_version\n    ;;\n  \"sles\")\n    platform_version=$major_version\n    ;;\n  \"suse\")\n    platform_version=$major_version\n    ;;\nesac\n\nif test \"x$platform_version\" = \"x\"; then\n  critical \"Unable to determine platform version!\"\n  report_bug\n  exit 1\nfi\n\nif test \"x$platform\" = \"xsolaris2\"; then\n  # hack up the path on Solaris to find wget\n  PATH=/usr/sfw/bin:$PATH\n  export PATH\nfi\n\nchecksum_mismatch() {\n  critical \"Package checksum mismatch!\"\n  report_bug\n  exit 1\n}\n\nunable_to_retrieve_package() {\n  critical \"Unable to retrieve a valid package!\"\n  report_bug\n  exit 1\n}\n\nrandom_hexdump () {\n  hexdump -n 2 -e '/2 \"%u\"' /dev/urandom\n}\n\nif test \"x$TMPDIR\" = \"x\"; then\n  tmp=\"/tmp\"\nelse\n  tmp=$TMPDIR\nfi\n\n# Random function since not all shells have $RANDOM\nif exists hexdump; then\n  random_number=random_hexdump\nelse\n  random_number=\"`date +%N`\"\nfi\n\ntmp_dir=\"$tmp/install.sh.$$.$random_number\"\n(umask 077 && mkdir $tmp_dir) || exit 1\n\ntmp_stderr=\"$tmp/stderr.$$.$random_number\"\n\ncapture_tmp_stderr() {\n  # spool up tmp_stderr from all the commands we called\n  if test -f $tmp_stderr; then\n    output=`cat ${tmp_stderr}`\n    stderr_results=\"${stderr_results}\\nSTDERR from $1:\\n\\n$output\\n\"\n  fi\n}\n\ntrap \"rm -f $tmp_stderr; rm -rf $tmp_dir; exit $1\" 1 2 15\n\n# do_wget URL FILENAME\ndo_wget() {\n  info \"Trying wget...\"\n  wget -O \"$2\" \"$1\" 2>$tmp_stderr\n  rc=$?\n\n  # check for 404\n  grep \"ERROR 404\" $tmp_stderr 2>&1 >/dev/null\n  if test $? -eq 0; then\n    critical \"ERROR 404\"\n    unable_to_retrieve_package\n  fi\n\n  # check for bad return status or empty output\n  if test $rc -ne 0 || test ! -s \"$2\"; then\n    capture_tmp_stderr \"wget\"\n    return 1\n  fi\n\n  return 0\n}\n\n# do_curl URL FILENAME\ndo_curl() {\n  info \"Trying curl...\"\n  curl -1 -sL -D $tmp_stderr \"$1\" > \"$2\"\n  rc=$?\n  # check for 404\n  grep \"404 Not Found\" $tmp_stderr 2>&1 >/dev/null\n  if test $? -eq 0; then\n    critical \"ERROR 404\"\n    unable_to_retrieve_package\n  fi\n\n  # check for bad return status or empty output\n  if test $rc -ne 0 || test ! -s \"$2\"; then\n    capture_tmp_stderr \"curl\"\n    return 1\n  fi\n\n  return 0\n}\n\n# do_fetch URL FILENAME\ndo_fetch() {\n  info \"Trying fetch...\"\n  fetch -o \"$2\" \"$1\" 2>$tmp_stderr\n  # check for bad return status\n  test $? -ne 0 && return 1\n  return 0\n}\n\n# do_perl URL FILENAME\ndo_perl() {\n  info \"Trying perl...\"\n  perl -e 'use LWP::Simple; getprint($ARGV[0]);' \"$1\" > \"$2\" 2>$tmp_stderr\n  rc=$?\n  # check for 404\n  grep \"404 Not Found\" $tmp_stderr 2>&1 >/dev/null\n  if test $? -eq 0; then\n    critical \"ERROR 404\"\n    unable_to_retrieve_package\n  fi\n\n  # check for bad return status or empty output\n  if test $rc -ne 0 || test ! -s \"$2\"; then\n    capture_tmp_stderr \"perl\"\n    return 1\n  fi\n\n  return 0\n}\n\ndo_checksum() {\n  if exists sha256sum; then\n    checksum=`sha256sum $1 | awk '{ print $1 }'`\n    if test \"x$checksum\" != \"x$2\"; then\n      checksum_mismatch\n    else\n      info \"Checksum compare with sha256sum succeeded.\"\n    fi\n  elif exists shasum; then\n    checksum=`shasum -a 256 $1 | awk '{ print $1 }'`\n    if test \"x$checksum\" != \"x$2\"; then\n      checksum_mismatch\n    else\n      info \"Checksum compare with shasum succeeded.\"\n    fi\n  elif exists md5sum; then\n    checksum=`md5sum $1 | awk '{ print $1 }'`\n    if test \"x$checksum\" != \"x$3\"; then\n      checksum_mismatch\n    else\n      info \"Checksum compare with md5sum succeeded.\"\n    fi\n  elif exists md5; then\n    checksum=`md5 $1 | awk '{ print $4 }'`\n    if test \"x$checksum\" != \"x$3\"; then\n      checksum_mismatch\n    else\n      info \"Checksum compare with md5 succeeded.\"\n    fi\n  else\n    warn \"Could not find a valid checksum program, pre-install shasum, md5sum or md5 in your O/S image to get valdation...\"\n  fi\n}\n\n# do_download URL FILENAME\ndo_download() {\n  info \"Downloading $1\"\n  info \"  to file $2\"\n\n  # we try all of these until we get success.\n  # perl, in particular may be present but LWP::Simple may not be installed\n\n  if exists wget; then\n    do_wget $1 $2 && return 0\n  fi\n\n  if exists curl; then\n    do_curl $1 $2 && return 0\n  fi\n\n  if exists fetch; then\n    do_fetch $1 $2 && return 0\n  fi\n\n  if exists perl; then\n    do_perl $1 $2 && return 0\n  fi\n\n  unable_to_retrieve_package\n}\n\n# install_file TYPE FILENAME\n# TYPE is \"rpm\", \"deb\", \"solaris\", or \"sh\"\ninstall_file() {\n  case \"$1\" in\n    \"rpm\")\n      info \"installing puppetlabs yum repo with rpm...\"\n      rpm -Uvh --oldpackage --replacepkgs \"$2\"\n      if test \"$version\" = 'latest'; then\n        yum install -y puppet-agent\n      else\n        yum install -y \"puppet-agent-${puppet_agent_version}\"\n      fi\n      ;;\n    \"deb\")\n      info \"installing puppetlabs apt repo with dpkg...\"\n      dpkg -i \"$2\"\n      apt-get update -y\n      if test \"$version\" = 'latest'; then\n        apt-get install -y puppet-agent\n      else\n        if test \"x$ubuntu_codename\" != \"x\"; then\n          apt-get install -y \"puppet-agent=${puppet_agent_version}-1${ubuntu_codename}\"\n        else\n          apt-get install -y \"puppet-agent=${puppet_agent_version}\"\n        fi\n      fi\n      ;;\n    \"solaris\")\n      critical \"Solaris not supported yet\"\n      ;;\n    \"dmg\" )\n      critical \"Puppet-Agent Not Supported Yet: $1\"\n      ;;\n    *)\n      critical \"Unknown filetype: $1\"\n      report_bug\n      exit 1\n      ;;\n  esac\n  if test $? -ne 0; then\n    critical \"Installation failed\"\n    report_bug\n    exit 1\n  fi\n}\n\n#Platforms that do not need downloads are in *, the rest get their own entry.\ncase $platform in\n  \"archlinux\")\n    critical \"Not got Puppet-agent not supported on Arch yet\"\n    ;;\n  \"freebsd\")\n    info \"Installing Puppet $version for FreeBSD...\"\n    if test \"$version\" != \"latest\"; then\n      warn \"In FreeBSD installation of older versions is not possible. Version is set to latest.\"\n    fi\n    case $major_version in\n      \"9\")\n        have_pkg=`grep -sc '^WITH_PKGNG' /etc/make.conf`\n        if test \"$have_pkg\" = 1; then\n          pkg install -y sysutils/puppet4\n        else\n          pkg_add -rF puppet4\n        fi\n        ;;\n      \"10\")\n        pkg install -y sysutils/puppet4\n        ;;\n    esac\n  ;;\n  *)\n    info \"Downloading Puppet $version for ${platform}...\"\n    case $platform in\n      \"el\")\n        info \"Red hat like platform! Lets get you an RPM...\"\n        filetype=\"rpm\"\n        filename=\"puppetlabs-release-pc1-el-${platform_version}.noarch.rpm\"\n        download_url=\"http://yum.puppetlabs.com/${filename}\"\n        ;;\n      \"fedora\")\n        info \"Fedora platform! Lets get the RPM...\"\n        filetype=\"rpm\"\n        filename=\"puppetlabs-release-pc1-fedora-${platform_version}.noarch.rpm\"\n        download_url=\"http://yum.puppetlabs.com/${filename}\"\n        ;;\n      \"debian\")\n        info \"Debian platform! Lets get you a DEB...\"\n        case $major_version in\n          \"5\") deb_codename=\"lenny\";;\n          \"6\") deb_codename=\"squeeze\";;\n          \"7\") deb_codename=\"wheezy\";;\n          \"8\") deb_codename=\"jessie\";;\n        esac\n        filetype=\"deb\"\n        filename=\"puppetlabs-release-pc1-${deb_codename}.deb\"\n        download_url=\"http://apt.puppetlabs.com/${filename}\"\n        ;;\n      \"ubuntu\")\n        info \"Ubuntu platform! Lets get you a DEB...\"\n        case $platform_version in\n          \"12.04\") ubuntu_codename=\"precise\";;\n          \"12.10\") ubuntu_codename=\"quantal\";;\n          \"13.04\") ubuntu_codename=\"raring\";;\n          \"13.10\") ubuntu_codename=\"saucy\";;\n          \"14.04\") ubuntu_codename=\"trusty\";;\n          \"15.04\") ubuntu_codename=\"vivid\";;\n          \"15.10\") ubuntu_codename=\"wily\";;\n          \"16.04\") ubuntu_codename=\"xenial\";;\n          \"16.10\") ubuntu_codename=\"yakkety\";;\n          \"14.10\") utopic;;\n        esac\n        filetype=\"deb\"\n        filename=\"puppetlabs-release-pc1-${ubuntu_codename}.deb\"\n        download_url=\"http://apt.puppetlabs.com/${filename}\"\n        ;;\n      \"mac_os_x\")\n        critical \"Script doesn't Puppet-agent not supported on OSX yet\"\n        ;;\n      *)\n        critical \"Sorry $platform is not supported yet!\"\n        report_bug\n        exit 1\n        ;;\n    esac\n\n    if test \"x$cmdline_filename\" != \"x\"; then\n      download_filename=$cmdline_filename\n    else\n      download_filename=$filename\n    fi\n\n    if test \"x$cmdline_dl_dir\" != \"x\"; then\n      download_filename=\"$cmdline_dl_dir/$download_filename\"\n    else\n      download_filename=\"$tmp_dir/$download_filename\"\n    fi\n\n    do_download \"$download_url\"  \"$download_filename\"\n\n    install_file $filetype \"$download_filename\"\n    ln -s /opt/puppetlabs/bin/puppet /usr/bin/puppet\n    ;;\nesac\n\n#Cleanup\nif test \"x$tmp_dir\" != \"x\"; then\n  rm -r \"$tmp_dir\"\nfi",
  "envs": [],
  "scriptArgs": null,
  "scriptLang": "SHELL",
  "timeout": 30
}