{
  "referenceId": "OvOd7",
  "version": "1.0",
  "name": "Veeam_test",
  "license": "EULA",
  "description": null,
  "baseScript": "import getpass\nimport re\nimport requests\nfrom requests.auth import HTTPBasicAuth\n#from requests.packages.urllib3.exceptions import InsecureRequestWarning\nimport xml.etree.ElementTree as ET\nimport xml.dom.minidom\nimport urllib2\nfrom time import sleep\ndef remove_namespace(data):\n    data = data.decode('utf-8')\n    result = re.sub(' xmlns=\"[^\"]+\"', '', data, count=1)\n    return result\n##############################################################################33\nprint (\"Welcome to Veeam 9.5 / EM 9.5 REST API\")\nprint (\" \")\nem_user = 'localhost\\Administrator'\nem_pass = False\nsession_id = \" \"\nem_pass = 'Gridstore123'\n#print (\"Password is: %s isn't it?\"  %em_pass)\napi_url = 'https://10.0.4.140:9398/api/'\nsession = requests.Session()\nr = session.post(api_url+'/sessionMngr/?v=latest', auth=(em_user, em_pass), verify=False)\nlinks = ET.fromstring(remove_namespace(r.content))\nsession_id = links.find(\"SessionId\").text\nprint (\"Sessio ID is : %s\" %session_id)\n#headers = {'Content-Type': 'application/xml'}\n#xml = \"\"\"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n#<BackupServerSpec xmlns=\"http://www.veeam.com/ent/v1.0\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n# <Description>Veeam backup server in Columbus</Description>\n# <DnsNameOrIpAddress>10.0.4.140</DnsNameOrIpAddress>\n#<Port>9392</Port>\n#<Username>.\\Administrator</Username>\n# <Password>Gridstore123</Password>\n#</BackupServerSpec>\"\"\"\n#X-RestSvcSessionId\n#r = session.post(api_url+'/backupServers?action=create', data=xml, headers=headers, verify=False)\n#print r.status_code\n#print r.content\nr = session.get(api_url+'/backupServers', verify=False)\n#print r.content\nvm_name = urllib2.quote('splunkp-3qh')\nr = session.get(api_url+'/catalog/vms/'+vm_name)\nprint r.content\nrps = ET.fromstring(remove_namespace(r.content))\nhref = rps.attrib.get(\"Href\")\nprint href\n#result = []\n#if len(rps) == 0:\n#print rps\nr = session.get(api_url+'/vmRestorePoints')\nprint r.content\nrps = ET.fromstring(remove_namespace(r.content))\nprint rps.tag, rps.attrib\nfor child in rps:\n        #print child.tag, child.attrib\n        name = child.attrib[\"Name\"].split(\"@\")[0]\n        if name == vm_name:\n        \t\tprint \"The restorepoints:\"\n                print child.attrib\nr = session.get(api_url+'vmReplicaPoints')\nprint \"The replica points:\"\nprint \" \"\nprint \"\\n\"\nprint r.content\nrps = ET.fromstring(remove_namespace(r.content))\nprint rps.tag, rps.attrib\nfor child in rps:\n#       print child.tag, child.attrib\n        print child.attrib[\"Name\"].split(\"@\")[0]\n        name = child.attrib[\"Name\"].split(\"@\")[0]\n        if name == 'splunk-3x4':\n                print child .attrib\n                print \"\\n\"\n                print \"\\n\"\n#points = rps.find('splunkp-3qh*').text\n#print points\n#for rp in list(rps[0]):\n#       if (rp.attrib.get(\"Rel\") == \"Alternate\"):\n#               vm_name      = rp.attrib.get(\"Name\")\n#               url          = rp.attrib.get(\"Href\")\n#               vm_info = dict(vm_name=vm_name, url=url)\n#               result.append(vm_info)\n#print result",
  "envs": [],
  "scriptArgs": null,
  "scriptLang": "PYTHON",
  "timeout": 30
}